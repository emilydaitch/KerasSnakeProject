#Suppose we have a class:

#public class Foo {
#  public void first() { print("first"); }
#  public void second() { print("second"); }
#  public void third() { print("third"); }
#}
#The same instance of Foo will be passed to three different threads. 
#Thread A will call first(), thread B will call second(), and thread C will call third(). 
#Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().



from threading import Barrier #python3

class Foo:
    def __init__(self):
        self.first_barrier = Barrier(2)
        self.second_barrier = Barrier(2)
            
    def first(self, printFirst):
        printFirst()
        self.first_barrier.wait()
        
    def second(self, printSecond):
        self.first_barrier.wait()
        printSecond()
        self.second_barrier.wait()
            
    def third(self, printThird):
        self.second_barrier.wait()
        printThird()